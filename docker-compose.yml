services:
    frontend:
        build:
            context: ./frontend
            dockerfile: DockerfileFrontendMMV
        container_name: frontendMMV
        ports:
        - "3000:3000"
        volumes:
        - ./frontend:/app
        - /app/node_modules
        environment:
        - CHOKIDAR_USEPOLLING=true # Activa polling para asegurar detecci√≥n de cambios en Docker
        depends_on:
        - backend
        networks:
        - app-network
    backend:
        build:
            context: ./backend
            dockerfile: DockerfileBackendMMV
        container_name: backendMMV
        ports:
        - "8000:8000"
        volumes:
        - ./backend:/app
        depends_on:
        - database
        command: sh -c "composer install && composer show doctrine/dbal && php -S 0.0.0.0:8000 -t public"
        networks:
        - app-network

    database:
        image: mysql:8.0
        container_name: dbMMV
        ports:
        - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: myapp
            MYSQL_USER: user
            MYSQL_PASSWORD: password
        volumes:
        - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
        - database_data:/var/lib/mysql
        networks:
        - app-network

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        container_name: phpmyadminMMV
        ports:
        - "8080:8080"
        environment:
            PMA_HOST: database
            PMA_USER: user
            PMA_PASSWORD: password
        depends_on:
        - database
        networks:
        - app-network

    web:
        build:
            context: ./web
            dockerfile: DockerfileWebMMV
        container_name: webMMV
        ports:
        - "80:80"
        depends_on:
        - frontend
        - backend
        networks:
        - app-network

networks:
    app-network:
        driver: bridge

volumes:
    database_data:
        driver: local
